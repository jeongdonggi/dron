1. rgb를 hsv로 변경: 색 출력이 좀 더 쉬움
2. frame을 while문을 통해 하나씩 찍음
3. frame에서의 blue 픽셀값을 상하좌우로 나눠서 저장
4. 저장한  픽셀값을 기준으로 드론이 움직일 수 있도록 구현
 [ 여기서 level_cnt은 크로마키의 위치를 의미한다.]
 - level 1은 기본적으로 위치가 정해져 있었기 때문에 올라가자마자 원을 찾도록 해주었음
 - level 2의 픽셀값이 아예 없을 경우 오른쪽으로 움직이게 해줌
 - level 3의 픽셀값이 아예 없을 경우 위로 움직인 후 뒤로 움직이게 해줌
 - 공통적으로 크로마키가 중간으로 올 수 있도록 크로마키 값에 따라 드론을 움직여줌
5. 원을 찾음
 - 원을 찾아서 원을 칠함
 - 원을 찾았을 때: 원의 중점과 드론의 중점을 구하고 차를 구함
	원의 중점 구하는 방법: 원의 x, y값의 합을 개수만큼으로 나눠 평균을 구함
 - level 3일 때 찍은 사진의 사각형의 코너를 검출한다. (혼자 코딩)
	1) frame을 찍는다.
	2) 찍은 사진을 pgonCorners함수를 사용하여 왼쪽 코너의 x축의 차의 값을 줄여서 값을 구함
 
 - 원을 찾지 못하였을 경우: level 1일 때에는 위로 올리고 나머지는 뒤로 보냄
6.원을 찾았으면 드론 센터와 원의 중점의 차에 따라 드론 센터를 맞춤
 - 이때 원의 픽셀값이 정해준 값보다 많고 최소한의 줌점차의 값에 들어가게 된다면 앞으로 직진
7. 드론이 원을 통과하게 된다면 표식을 검출하게 됨
 - 표식 검출을 위한 frame 찍기
 - level에 따른 표식의 색이 정해져 있기 때문에 level에 따라 색을 따로 찾게됨
 - level 1: 초록색 검출 후 우회전하고 앞으로 조금 움직임
 - level 2: 보라색 검출 후 크로마키에 걸리지 않게 하기 위해 90도 우회전 후 앞으로 조금 보내고 45도 우회전
 - level 3: 빨간색 검출 시 착지
 - 검출이 도지ㅣ 않았다면 드론을 조금 뒤로 보냄
8. 원의 픽셀 값의 따라 앞으로 움직이는 거리를 변경
 - 멀수록 많이 움직임
9. 원과의 중점 차가 많이 나게 되면 그에 맞게 드론 움직임